// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aadhaar_service.proto

package aadhaarscrapper

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on HealthCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *HealthCheckRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Service

	// no validation rules for RestartCode

	// no validation rules for Command

	return nil
}

// HealthCheckRequestValidationError is the validation error returned by
// HealthCheckRequest.Validate if the designated constraints aren't met.
type HealthCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthCheckRequestValidationError) ErrorName() string {
	return "HealthCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e HealthCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthCheckRequestValidationError{}

// Validate checks the field values on DefaultSuccessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DefaultSuccessResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Msg

	return nil
}

// DefaultSuccessResponseValidationError is the validation error returned by
// DefaultSuccessResponse.Validate if the designated constraints aren't met.
type DefaultSuccessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DefaultSuccessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DefaultSuccessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DefaultSuccessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DefaultSuccessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DefaultSuccessResponseValidationError) ErrorName() string {
	return "DefaultSuccessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DefaultSuccessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDefaultSuccessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DefaultSuccessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DefaultSuccessResponseValidationError{}

// Validate checks the field values on HealthCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *HealthCheckResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	// no validation rules for MemStat

	return nil
}

// HealthCheckResponseValidationError is the validation error returned by
// HealthCheckResponse.Validate if the designated constraints aren't met.
type HealthCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthCheckResponseValidationError) ErrorName() string {
	return "HealthCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HealthCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthCheckResponseValidationError{}

// Validate checks the field values on ResponseStatus with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ResponseStatus) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetValidationDetails() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResponseStatusValidationError{
					field:  fmt.Sprintf("ValidationDetails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ResponseStatusValidationError is the validation error returned by
// ResponseStatus.Validate if the designated constraints aren't met.
type ResponseStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseStatusValidationError) ErrorName() string { return "ResponseStatusValidationError" }

// Error satisfies the builtin error interface
func (e ResponseStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseStatusValidationError{}

// Validate checks the field values on GetCaptchaRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetCaptchaRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetCaptchaRequestValidationError is the validation error returned by
// GetCaptchaRequest.Validate if the designated constraints aren't met.
type GetCaptchaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCaptchaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCaptchaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCaptchaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCaptchaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCaptchaRequestValidationError) ErrorName() string {
	return "GetCaptchaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCaptchaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCaptchaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCaptchaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCaptchaRequestValidationError{}

// Validate checks the field values on GetCaptchaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCaptchaResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCaptchaResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCaptchaResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCaptchaResponseValidationError is the validation error returned by
// GetCaptchaResponse.Validate if the designated constraints aren't met.
type GetCaptchaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCaptchaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCaptchaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCaptchaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCaptchaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCaptchaResponseValidationError) ErrorName() string {
	return "GetCaptchaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCaptchaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCaptchaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCaptchaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCaptchaResponseValidationError{}

// Validate checks the field values on VerifyCaptchaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VerifyCaptchaRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetSessionId()) < 1 {
		return VerifyCaptchaRequestValidationError{
			field:  "SessionId",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetUidNo()) < 12 {
		return VerifyCaptchaRequestValidationError{
			field:  "UidNo",
			reason: "value length must be at least 12 runes",
		}
	}

	if len(m.GetUidNo()) > 16 {
		return VerifyCaptchaRequestValidationError{
			field:  "UidNo",
			reason: "value length must be at most 16 bytes",
		}
	}

	if !_VerifyCaptchaRequest_UidNo_Pattern.MatchString(m.GetUidNo()) {
		return VerifyCaptchaRequestValidationError{
			field:  "UidNo",
			reason: "value does not match regex pattern \"^[0-9]*$\"",
		}
	}

	if utf8.RuneCountInString(m.GetSecurityCode()) < 1 {
		return VerifyCaptchaRequestValidationError{
			field:  "SecurityCode",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// VerifyCaptchaRequestValidationError is the validation error returned by
// VerifyCaptchaRequest.Validate if the designated constraints aren't met.
type VerifyCaptchaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyCaptchaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyCaptchaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyCaptchaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyCaptchaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyCaptchaRequestValidationError) ErrorName() string {
	return "VerifyCaptchaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyCaptchaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyCaptchaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyCaptchaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyCaptchaRequestValidationError{}

var _VerifyCaptchaRequest_UidNo_Pattern = regexp.MustCompile("^[0-9]*$")

// Validate checks the field values on VerifyCaptchaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VerifyCaptchaResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VerifyCaptchaResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// VerifyCaptchaResponseValidationError is the validation error returned by
// VerifyCaptchaResponse.Validate if the designated constraints aren't met.
type VerifyCaptchaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyCaptchaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyCaptchaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyCaptchaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyCaptchaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyCaptchaResponseValidationError) ErrorName() string {
	return "VerifyCaptchaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyCaptchaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyCaptchaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyCaptchaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyCaptchaResponseValidationError{}

// Validate checks the field values on VerifyOtpAndGetAadhaarRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VerifyOtpAndGetAadhaarRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetSessionId()) < 1 {
		return VerifyOtpAndGetAadhaarRequestValidationError{
			field:  "SessionId",
			reason: "value length must be at least 1 runes",
		}
	}

	if l := utf8.RuneCountInString(m.GetOtp()); l < 6 || l > 8 {
		return VerifyOtpAndGetAadhaarRequestValidationError{
			field:  "Otp",
			reason: "value length must be between 6 and 8 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetZipCode()) != 4 {
		return VerifyOtpAndGetAadhaarRequestValidationError{
			field:  "ZipCode",
			reason: "value length must be 4 runes",
		}

	}

	// no validation rules for IncludeZipFile

	// no validation rules for IncludeXmlFile

	return nil
}

// VerifyOtpAndGetAadhaarRequestValidationError is the validation error
// returned by VerifyOtpAndGetAadhaarRequest.Validate if the designated
// constraints aren't met.
type VerifyOtpAndGetAadhaarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyOtpAndGetAadhaarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyOtpAndGetAadhaarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyOtpAndGetAadhaarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyOtpAndGetAadhaarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyOtpAndGetAadhaarRequestValidationError) ErrorName() string {
	return "VerifyOtpAndGetAadhaarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyOtpAndGetAadhaarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyOtpAndGetAadhaarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyOtpAndGetAadhaarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyOtpAndGetAadhaarRequestValidationError{}

// Validate checks the field values on AadhaarDetails with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AadhaarDetails) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPoi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AadhaarDetailsValidationError{
				field:  "Poi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPoa()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AadhaarDetailsValidationError{
				field:  "Poa",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Photo

	return nil
}

// AadhaarDetailsValidationError is the validation error returned by
// AadhaarDetails.Validate if the designated constraints aren't met.
type AadhaarDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AadhaarDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AadhaarDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AadhaarDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AadhaarDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AadhaarDetailsValidationError) ErrorName() string { return "AadhaarDetailsValidationError" }

// Error satisfies the builtin error interface
func (e AadhaarDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAadhaarDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AadhaarDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AadhaarDetailsValidationError{}

// Validate checks the field values on VerifyOtpAndGetAadhaarResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VerifyOtpAndGetAadhaarResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VerifyOtpAndGetAadhaarResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VerifyOtpAndGetAadhaarResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// VerifyOtpAndGetAadhaarResponseValidationError is the validation error
// returned by VerifyOtpAndGetAadhaarResponse.Validate if the designated
// constraints aren't met.
type VerifyOtpAndGetAadhaarResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyOtpAndGetAadhaarResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyOtpAndGetAadhaarResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyOtpAndGetAadhaarResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyOtpAndGetAadhaarResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyOtpAndGetAadhaarResponseValidationError) ErrorName() string {
	return "VerifyOtpAndGetAadhaarResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyOtpAndGetAadhaarResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyOtpAndGetAadhaarResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyOtpAndGetAadhaarResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyOtpAndGetAadhaarResponseValidationError{}

// Validate checks the field values on AutoVerifyCaptchaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AutoVerifyCaptchaRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUidNo()); l < 12 || l > 16 {
		return AutoVerifyCaptchaRequestValidationError{
			field:  "UidNo",
			reason: "value length must be between 12 and 16 runes, inclusive",
		}
	}

	if !_AutoVerifyCaptchaRequest_UidNo_Pattern.MatchString(m.GetUidNo()) {
		return AutoVerifyCaptchaRequestValidationError{
			field:  "UidNo",
			reason: "value does not match regex pattern \"^[0-9]*$\"",
		}
	}

	return nil
}

// AutoVerifyCaptchaRequestValidationError is the validation error returned by
// AutoVerifyCaptchaRequest.Validate if the designated constraints aren't met.
type AutoVerifyCaptchaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoVerifyCaptchaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoVerifyCaptchaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoVerifyCaptchaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoVerifyCaptchaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoVerifyCaptchaRequestValidationError) ErrorName() string {
	return "AutoVerifyCaptchaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AutoVerifyCaptchaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoVerifyCaptchaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoVerifyCaptchaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoVerifyCaptchaRequestValidationError{}

var _AutoVerifyCaptchaRequest_UidNo_Pattern = regexp.MustCompile("^[0-9]*$")

// Validate checks the field values on AutoVerifyCaptchaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AutoVerifyCaptchaResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AutoVerifyCaptchaResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AutoVerifyCaptchaResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AutoVerifyCaptchaResponseValidationError is the validation error returned by
// AutoVerifyCaptchaResponse.Validate if the designated constraints aren't met.
type AutoVerifyCaptchaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoVerifyCaptchaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoVerifyCaptchaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoVerifyCaptchaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoVerifyCaptchaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoVerifyCaptchaResponseValidationError) ErrorName() string {
	return "AutoVerifyCaptchaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AutoVerifyCaptchaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoVerifyCaptchaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoVerifyCaptchaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoVerifyCaptchaResponseValidationError{}

// Validate checks the field values on ResponseStatus_ValidationErrDetail with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ResponseStatus_ValidationErrDetail) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Field

	// no validation rules for Reason

	return nil
}

// ResponseStatus_ValidationErrDetailValidationError is the validation error
// returned by ResponseStatus_ValidationErrDetail.Validate if the designated
// constraints aren't met.
type ResponseStatus_ValidationErrDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseStatus_ValidationErrDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseStatus_ValidationErrDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseStatus_ValidationErrDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseStatus_ValidationErrDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseStatus_ValidationErrDetailValidationError) ErrorName() string {
	return "ResponseStatus_ValidationErrDetailValidationError"
}

// Error satisfies the builtin error interface
func (e ResponseStatus_ValidationErrDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseStatus_ValidationErrDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseStatus_ValidationErrDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseStatus_ValidationErrDetailValidationError{}

// Validate checks the field values on GetCaptchaResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCaptchaResponse_Data) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SessionId

	// no validation rules for CaptchaImage

	return nil
}

// GetCaptchaResponse_DataValidationError is the validation error returned by
// GetCaptchaResponse_Data.Validate if the designated constraints aren't met.
type GetCaptchaResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCaptchaResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCaptchaResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCaptchaResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCaptchaResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCaptchaResponse_DataValidationError) ErrorName() string {
	return "GetCaptchaResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetCaptchaResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCaptchaResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCaptchaResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCaptchaResponse_DataValidationError{}

// Validate checks the field values on AadhaarDetails_Poi with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AadhaarDetails_Poi) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Dob

	// no validation rules for EmailHash

	// no validation rules for Gender

	// no validation rules for MobileHash

	// no validation rules for Name

	return nil
}

// AadhaarDetails_PoiValidationError is the validation error returned by
// AadhaarDetails_Poi.Validate if the designated constraints aren't met.
type AadhaarDetails_PoiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AadhaarDetails_PoiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AadhaarDetails_PoiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AadhaarDetails_PoiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AadhaarDetails_PoiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AadhaarDetails_PoiValidationError) ErrorName() string {
	return "AadhaarDetails_PoiValidationError"
}

// Error satisfies the builtin error interface
func (e AadhaarDetails_PoiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAadhaarDetails_Poi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AadhaarDetails_PoiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AadhaarDetails_PoiValidationError{}

// Validate checks the field values on AadhaarDetails_Poa with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AadhaarDetails_Poa) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Careof

	// no validation rules for Country

	// no validation rules for Dist

	// no validation rules for House

	// no validation rules for Landmark

	// no validation rules for Locality

	// no validation rules for Pincode

	// no validation rules for Postoffice

	// no validation rules for State

	// no validation rules for Street

	// no validation rules for Subdist

	// no validation rules for Vtc

	return nil
}

// AadhaarDetails_PoaValidationError is the validation error returned by
// AadhaarDetails_Poa.Validate if the designated constraints aren't met.
type AadhaarDetails_PoaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AadhaarDetails_PoaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AadhaarDetails_PoaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AadhaarDetails_PoaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AadhaarDetails_PoaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AadhaarDetails_PoaValidationError) ErrorName() string {
	return "AadhaarDetails_PoaValidationError"
}

// Error satisfies the builtin error interface
func (e AadhaarDetails_PoaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAadhaarDetails_Poa.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AadhaarDetails_PoaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AadhaarDetails_PoaValidationError{}

// Validate checks the field values on VerifyOtpAndGetAadhaarResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *VerifyOtpAndGetAadhaarResponse_Data) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VerifyOtpAndGetAadhaarResponse_DataValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ZipFile

	// no validation rules for XmlFile

	return nil
}

// VerifyOtpAndGetAadhaarResponse_DataValidationError is the validation error
// returned by VerifyOtpAndGetAadhaarResponse_Data.Validate if the designated
// constraints aren't met.
type VerifyOtpAndGetAadhaarResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyOtpAndGetAadhaarResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyOtpAndGetAadhaarResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyOtpAndGetAadhaarResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyOtpAndGetAadhaarResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyOtpAndGetAadhaarResponse_DataValidationError) ErrorName() string {
	return "VerifyOtpAndGetAadhaarResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyOtpAndGetAadhaarResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyOtpAndGetAadhaarResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyOtpAndGetAadhaarResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyOtpAndGetAadhaarResponse_DataValidationError{}

// Validate checks the field values on AutoVerifyCaptchaResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AutoVerifyCaptchaResponse_Data) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SessionId

	// no validation rules for CaptchaImage

	return nil
}

// AutoVerifyCaptchaResponse_DataValidationError is the validation error
// returned by AutoVerifyCaptchaResponse_Data.Validate if the designated
// constraints aren't met.
type AutoVerifyCaptchaResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoVerifyCaptchaResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoVerifyCaptchaResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoVerifyCaptchaResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoVerifyCaptchaResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoVerifyCaptchaResponse_DataValidationError) ErrorName() string {
	return "AutoVerifyCaptchaResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AutoVerifyCaptchaResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoVerifyCaptchaResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoVerifyCaptchaResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoVerifyCaptchaResponse_DataValidationError{}
