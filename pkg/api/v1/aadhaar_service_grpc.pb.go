// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package aadhaarscrapper

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AadhaarServiceClient is the client API for AadhaarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AadhaarServiceClient interface {
	// To fetch captcha and session id from UIDAI.
	GetCaptcha(ctx context.Context, in *GetCaptchaRequest, opts ...grpc.CallOption) (*GetCaptchaResponse, error)
	// Once captcha fetched, need to call this API with aadhaar number(uid_no) and
	// captcha(security_code).
	// On success user will receive an OTP on phone number associated with
	// aadhaar.
	VerifyCaptcha(ctx context.Context, in *VerifyCaptchaRequest, opts ...grpc.CallOption) (*VerifyCaptchaResponse, error)
	// download zip file from UIDAI and fetch details.
	VerifyOtpAndGetAadhaar(ctx context.Context, in *VerifyOtpAndGetAadhaarRequest, opts ...grpc.CallOption) (*VerifyOtpAndGetAadhaarResponse, error)
	VerifyAadhaarNumber(ctx context.Context, in *VerifyAadhaarNumberRequest, opts ...grpc.CallOption) (*VerifyAadhaarNumberResponse, error)
}

type aadhaarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAadhaarServiceClient(cc grpc.ClientConnInterface) AadhaarServiceClient {
	return &aadhaarServiceClient{cc}
}

func (c *aadhaarServiceClient) GetCaptcha(ctx context.Context, in *GetCaptchaRequest, opts ...grpc.CallOption) (*GetCaptchaResponse, error) {
	out := new(GetCaptchaResponse)
	err := c.cc.Invoke(ctx, "/aadhaarscrapperv1.AadhaarService/GetCaptcha", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aadhaarServiceClient) VerifyCaptcha(ctx context.Context, in *VerifyCaptchaRequest, opts ...grpc.CallOption) (*VerifyCaptchaResponse, error) {
	out := new(VerifyCaptchaResponse)
	err := c.cc.Invoke(ctx, "/aadhaarscrapperv1.AadhaarService/VerifyCaptcha", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aadhaarServiceClient) VerifyOtpAndGetAadhaar(ctx context.Context, in *VerifyOtpAndGetAadhaarRequest, opts ...grpc.CallOption) (*VerifyOtpAndGetAadhaarResponse, error) {
	out := new(VerifyOtpAndGetAadhaarResponse)
	err := c.cc.Invoke(ctx, "/aadhaarscrapperv1.AadhaarService/VerifyOtpAndGetAadhaar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aadhaarServiceClient) VerifyAadhaarNumber(ctx context.Context, in *VerifyAadhaarNumberRequest, opts ...grpc.CallOption) (*VerifyAadhaarNumberResponse, error) {
	out := new(VerifyAadhaarNumberResponse)
	err := c.cc.Invoke(ctx, "/aadhaarscrapperv1.AadhaarService/VerifyAadhaarNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AadhaarServiceServer is the server API for AadhaarService service.
// All implementations must embed UnimplementedAadhaarServiceServer
// for forward compatibility
type AadhaarServiceServer interface {
	// To fetch captcha and session id from UIDAI.
	GetCaptcha(context.Context, *GetCaptchaRequest) (*GetCaptchaResponse, error)
	// Once captcha fetched, need to call this API with aadhaar number(uid_no) and
	// captcha(security_code).
	// On success user will receive an OTP on phone number associated with
	// aadhaar.
	VerifyCaptcha(context.Context, *VerifyCaptchaRequest) (*VerifyCaptchaResponse, error)
	// download zip file from UIDAI and fetch details.
	VerifyOtpAndGetAadhaar(context.Context, *VerifyOtpAndGetAadhaarRequest) (*VerifyOtpAndGetAadhaarResponse, error)
	VerifyAadhaarNumber(context.Context, *VerifyAadhaarNumberRequest) (*VerifyAadhaarNumberResponse, error)
	mustEmbedUnimplementedAadhaarServiceServer()
}

// UnimplementedAadhaarServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAadhaarServiceServer struct {
}

func (UnimplementedAadhaarServiceServer) GetCaptcha(context.Context, *GetCaptchaRequest) (*GetCaptchaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCaptcha not implemented")
}
func (UnimplementedAadhaarServiceServer) VerifyCaptcha(context.Context, *VerifyCaptchaRequest) (*VerifyCaptchaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCaptcha not implemented")
}
func (UnimplementedAadhaarServiceServer) VerifyOtpAndGetAadhaar(context.Context, *VerifyOtpAndGetAadhaarRequest) (*VerifyOtpAndGetAadhaarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOtpAndGetAadhaar not implemented")
}
func (UnimplementedAadhaarServiceServer) VerifyAadhaarNumber(context.Context, *VerifyAadhaarNumberRequest) (*VerifyAadhaarNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAadhaarNumber not implemented")
}
func (UnimplementedAadhaarServiceServer) mustEmbedUnimplementedAadhaarServiceServer() {}

// UnsafeAadhaarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AadhaarServiceServer will
// result in compilation errors.
type UnsafeAadhaarServiceServer interface {
	mustEmbedUnimplementedAadhaarServiceServer()
}

func RegisterAadhaarServiceServer(s grpc.ServiceRegistrar, srv AadhaarServiceServer) {
	s.RegisterService(&AadhaarService_ServiceDesc, srv)
}

func _AadhaarService_GetCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCaptchaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AadhaarServiceServer).GetCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aadhaarscrapperv1.AadhaarService/GetCaptcha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AadhaarServiceServer).GetCaptcha(ctx, req.(*GetCaptchaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AadhaarService_VerifyCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCaptchaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AadhaarServiceServer).VerifyCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aadhaarscrapperv1.AadhaarService/VerifyCaptcha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AadhaarServiceServer).VerifyCaptcha(ctx, req.(*VerifyCaptchaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AadhaarService_VerifyOtpAndGetAadhaar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyOtpAndGetAadhaarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AadhaarServiceServer).VerifyOtpAndGetAadhaar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aadhaarscrapperv1.AadhaarService/VerifyOtpAndGetAadhaar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AadhaarServiceServer).VerifyOtpAndGetAadhaar(ctx, req.(*VerifyOtpAndGetAadhaarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AadhaarService_VerifyAadhaarNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAadhaarNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AadhaarServiceServer).VerifyAadhaarNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aadhaarscrapperv1.AadhaarService/VerifyAadhaarNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AadhaarServiceServer).VerifyAadhaarNumber(ctx, req.(*VerifyAadhaarNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AadhaarService_ServiceDesc is the grpc.ServiceDesc for AadhaarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AadhaarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aadhaarscrapperv1.AadhaarService",
	HandlerType: (*AadhaarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCaptcha",
			Handler:    _AadhaarService_GetCaptcha_Handler,
		},
		{
			MethodName: "VerifyCaptcha",
			Handler:    _AadhaarService_VerifyCaptcha_Handler,
		},
		{
			MethodName: "VerifyOtpAndGetAadhaar",
			Handler:    _AadhaarService_VerifyOtpAndGetAadhaar_Handler,
		},
		{
			MethodName: "VerifyAadhaarNumber",
			Handler:    _AadhaarService_VerifyAadhaarNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aadhaar_service.proto",
}
